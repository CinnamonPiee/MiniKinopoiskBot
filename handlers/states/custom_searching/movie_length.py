from aiogram import Router, F

from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.utils import markdown

from states.custom_searching import CustomSearching

from keyboards.reply.back_or_skip_kb import back_or_skip_kb
from keyboards.inline.create_custom_pagination_kb import create_custom_pagination_kb
from keyboards.reply.main_kb import main_kb

from utils.validations.valid_movie_length import valid_movie_length
from utils.validations.valid_user_and_film_id_in_history import valid_user_and_film_id_in_history
from utils.get_film_data import get_film_data

from api.random_custom_movie_serial_search import random_custom_movie_serial_search

from database.orm.film import add_film, film_exists


router = Router(name=__name__)


@router.message(CustomSearching.movie_length, F.text == "üö´ –ù–∞–∑–∞–¥ üö´")
async def custom_searching_movie_length_back(message: Message, state: FSMContext):
    await state.set_state(CustomSearching.country)
    await message.answer(
        text="–ù–∞–ø–∏—à–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É(—ã), –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç–∞—Ä–Ω, —Ç–æ\n"
             "–Ω–∞–ø–∏—à–∏—Ç–µ –∏—Ö —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, –Ω–∞–ø—Ä–∏–º–µ—Ä\n"
             "(–°–®–ê, –ò–Ω–¥–∏—è –ö–∞–Ω–∞–¥–∞).",
        reply_markup=back_or_skip_kb(),
    )


@router.message(CustomSearching.movie_length, F.text == "‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚è©")
async def custom_searching_movie_length(message: Message, state: FSMContext):
    await state.update_data(movie_length=None)

    data = await state.get_data()

    if data["type_choice"] == "movie":

        custom_data = []

        for _ in range(int(data["count"])):
            some_data = random_custom_movie_serial_search(
                type_choice=data["type_choice"],
                year=data["year"],
                rating=data["rating"],
                age_rating=data["age_rating"],
                movie_length=data["movie_length"],
                series_length=None,
                janr=data["janr"],
                country=data["country"]
            )

            if isinstance(some_data, dict):
                custom_data.append(some_data)
            elif isinstance(some_data, str):
                await message.answer(
                    text=some_data,
                    reply_markup=main_kb(),
                )

                await state.clear()
                break

        await state.update_data(custom_data=custom_data, page=0, telegram_id=message.from_user.id)

        item = custom_data[0]
        page = 0
        total_count = len(custom_data)
        keyboards = create_custom_pagination_kb(page, total_count)

        url, name, genres, rating, year, movie_length, countries, age_rating, description = get_film_data(item)

        if await film_exists(name):
            await valid_user_and_film_id_in_history(name, telegram_id=message.from_user.id)

        else:
            await add_film(
                telegram_id=message.from_user.id,
                name=name,
                janr=genres,
                year=int(year),
                country=countries,
                movie_length=0 if item["movieLength"] == None else int(item["movieLength"]),
                description=description,
                rating=rating,
                age_rating=age_rating,
                picture=url
            )

        caption = f"{markdown.hbold(name)}\n"\
            f"–ñ–∞–Ω—Ä—ã: {genres}\n"\
            f"–†–µ–π—Ç–∏–Ω–≥: {rating}\n"\
            f"–ì–æ–¥: {year}\n"\
            f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ñ–∏–ª—å–º–∞: {movie_length}\n"\
            f"–°—Ç—Ä–∞–Ω–∞: {countries}\n"\
            f"–í–æ–∑—Ä–∞—Å—Ç–Ω–æ–π —Ä–µ–π—Ç–∏–Ω–≥: {age_rating}\n"\
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}"\

        try:
            await message.bot.send_photo(
                chat_id=message.chat.id,
                photo=url,
                caption=caption,
                reply_markup=keyboards,
            )

        except:
            caption = f"{markdown.hbold(name)}\n"\
                f"–ñ–∞–Ω—Ä—ã: {genres}\n"\
                f"–†–µ–π—Ç–∏–Ω–≥: {rating}\n"\
                f"–ì–æ–¥: {year}\n"\
                f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ñ–∏–ª—å–º–∞: {movie_length}\n"\
                f"–°—Ç—Ä–∞–Ω–∞: {countries}\n"\
                f"–í–æ–∑—Ä–∞—Å—Ç–Ω–æ–π —Ä–µ–π—Ç–∏–Ω–≥: {age_rating}\n"\
                f"–û–ø–∏—Å–∞–Ω–∏–µ: None"

            await message.bot.send_photo(
                chat_id=message.chat.id,
                photo=url,
                caption=caption,
                reply_markup=keyboards,
            )

    elif data["type_choice"] == None:
        await state.set_state(CustomSearching.series_length)
        await message.answer(
            text="–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Ä–∏–∏ –∏–ª–∏ –æ—Ç—Ä—ã–≤–æ–∫ –∑–∞ –∫–æ—Ç–æ—Ä—ã–π\n"
                 "—Ö–æ—Ç–∏—Ç–µ –æ—Å—É—â–µ—Å—Ç–≤–∏—Ç—å –ø–æ–∏—Å–∫, –Ω–∞–ø—Ä–∏–º–µ—Ä\n"
                 "(40, 30-60).\n"
                 "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è - 5\n"
                 "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è - 200",
            reply_markup=back_or_skip_kb(),
        )


@router.message(CustomSearching.movie_length, F.text.cast(valid_movie_length).as_("movie_length"))
async def custom_searching_movie_length(message: Message, state: FSMContext):
    await state.update_data(movie_length=message.text)

    data = await state.get_data()

    if data["type_choice"] == "movie":

        custom_data = []

        for _ in range(int(data["count"])):
            some_data = random_custom_movie_serial_search(
                type_choice=data["type_choice"],
                year=data["year"],
                rating=data["rating"],
                age_rating=data["age_rating"],
                movie_length=data["movie_length"],
                janr=data["janr"],
                country=data["country"]
            )

            if isinstance(some_data, dict):
                custom_data.append(some_data)
            elif isinstance(some_data, str):
                await message.answer(
                    text=some_data,
                    reply_markup=main_kb(),
                )
                await state.clear()
                break

        await state.update_data(custom_data=custom_data, page=0, telegram_id=message.from_user.id)

        item = custom_data[0]
        page = 0
        total_count = len(custom_data)
        keyboards = create_custom_pagination_kb(page, total_count)

        url, name, genres, rating, year, movie_length, countries, age_rating, description = get_film_data(item)

        if await film_exists(name):
            await valid_user_and_film_id_in_history(name, telegram_id=message.from_user.id)

        else:
            await add_film(
                telegram_id=message.from_user.id,
                name=name,
                janr=genres,
                year=int(year),
                country=countries,
                movie_length=0 if item["movieLength"] == None else int(
                    item["movieLength"]),
                description=description,
                rating=rating,
                age_rating=age_rating,
                picture=url
            )

        caption = f"{markdown.hbold(name)}\n"\
            f"–ñ–∞–Ω—Ä—ã: {genres}\n"\
            f"–†–µ–π—Ç–∏–Ω–≥: {rating}\n"\
            f"–ì–æ–¥: {year}\n"\
            f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ñ–∏–ª—å–º–∞: {movie_length}\n"\
            f"–°—Ç—Ä–∞–Ω–∞: {countries}\n"\
            f"–í–æ–∑—Ä–∞—Å—Ç–Ω–æ–π —Ä–µ–π—Ç–∏–Ω–≥: {age_rating}\n"\
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}"\

        try:
            await message.bot.send_photo(
                chat_id=message.chat.id,
                photo=url,
                caption=caption,
                reply_markup=keyboards,
            )

        except:
            caption = f"{markdown.hbold(name)}\n"\
                f"–ñ–∞–Ω—Ä—ã: {genres}\n"\
                f"–†–µ–π—Ç–∏–Ω–≥: {rating}\n"\
                f"–ì–æ–¥: {year}\n"\
                f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ñ–∏–ª—å–º–∞: {movie_length}\n"\
                f"–°—Ç—Ä–∞–Ω–∞: {countries}\n"\
                f"–í–æ–∑—Ä–∞—Å—Ç–Ω–æ–π —Ä–µ–π—Ç–∏–Ω–≥: {age_rating}\n"\
                f"–û–ø–∏—Å–∞–Ω–∏–µ: None"

            await message.bot.send_photo(
                chat_id=message.chat.id,
                photo=url,
                caption=caption,
                reply_markup=keyboards,
            )

    elif data["type_choice"] == None:
        await state.set_state(CustomSearching.series_length)
        await message.answer(
            text="–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Ä–∏–∏ –∏–ª–∏ –æ—Ç—Ä—ã–≤–æ–∫ –∑–∞ –∫–æ—Ç–æ—Ä—ã–π\n"
                 "—Ö–æ—Ç–∏—Ç–µ –æ—Å—É—â–µ—Å—Ç–≤–∏—Ç—å –ø–æ–∏—Å–∫, –Ω–∞–ø—Ä–∏–º–µ—Ä\n"
                 "(40, 30-60).\n"
                 "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è - 5\n"
                 "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è - 200",
            reply_markup=back_or_skip_kb(),
        )


@router.message(CustomSearching.movie_length)
async def custom_searching_movie_length_none(message: Message):
    await message.answer(
        text="–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª üòî. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —á—Ç–æ –±—ã –≤—ã –Ω–∞–ø–∏—Å–∞–ª–∏\n"
             "–ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ñ–∏–ª—å–º–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –≤–∫–ª—é—á–∏—Ç—å –≤ —Ä–∞–Ω–¥–æ–º–Ω—ã–π –ø–æ–∏—Å–∫",
        reply_markup=back_or_skip_kb(),
    )
