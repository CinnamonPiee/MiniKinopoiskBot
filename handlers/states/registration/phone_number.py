from aiogram import Router, F

from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from aiogram.utils import markdown

from keyboards.reply.back_kb import back_kb
from keyboards.reply.main_kb import main_kb
from keyboards.reply.back_or_number_kb import back_or_number_kb

from states.registration import Registration

from utils.validations.valid_phonenumber import valid_phonenumber

from database.orm.user import add_user, phone_number_exists


router = Router(name=__name__)


@router.message(Registration.phone_number, F.text == "üö´ –ù–∞–∑–∞–¥ üö´")
async def registration_phone_number_handler_back(message: Message, state: FSMContext):
    await state.set_state(Registration.email)
    await message.answer(
        text="–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø–æ—á—Ç—É.",
        reply_markup=back_kb(),
    )


@router.message(Registration.phone_number, F.text.cast(valid_phonenumber).as_("phone_number"))
async def registration_phone_number_handler(message: Message, state: FSMContext):
    if await phone_number_exists(message.text):
        await message.answer(
            text="–≠—Ç–æ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è.\n"
                 "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.",
            reply_markup=back_or_number_kb(),
            parse_mode=None,
        )

    await state.update_data(phone_number=message.text)

    data = await state.get_data()

    await add_user(
        password=data["password"],
        username=data["name"],
        email=data["email"],
        telegram_id=int(message.from_user.id),
        phone_number=data["phone_number"],
    )
    
    await message.answer(
        text=f"–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! üéâ\n"
             f"–î–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ —Å –±–æ—Ç–æ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É\n"
             f"/help.",
        reply_markup=main_kb(),
        parse_mode=None,
    )

    await state.clear()


@router.message(Registration.phone_number, F.contact)
async def registration_phone_number_handler_contact(message: Message, state: FSMContext):
    if await phone_number_exists(message.text):
        await message.answer(
            text="–≠—Ç–æ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è.\n"
                 "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.",
            reply_markup=back_or_number_kb(),
            parse_mode=None,
        )

    await state.update_data(phone_number=str(message.contact.phone_number))

    data = await state.get_data()

    await add_user(
        password=data["password"],
        username=data["name"],
        email=data["email"],
        telegram_id=int(message.from_user.id),
        phone_number=data["phone_number"],
    )

    await message.answer(
        text=f"–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n"
        f"–î–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ —Å –±–æ—Ç–æ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å\n"
        f"–∫–æ–º–∞–Ω–¥—É {markdown.hbold("/help")}.",
        reply_markup=main_kb(),
        parse_mode=None,
    )

    await state.clear()


@router.message(Registration.phone_number)
async def registration_phone_number_handler_none(message: Message):
    await message.answer(
        text="–ü—Ä–æ—Å—Ç–∏—Ç–µ —è –Ω–µ –ø–æ–Ω–∏–º–∞—é.üòî\n"
             "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É <–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º>\n"
             "–¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∞—à–µ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n"
             "‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è",
        reply_markup=back_or_number_kb(),
        parse_mode=None,
    )

