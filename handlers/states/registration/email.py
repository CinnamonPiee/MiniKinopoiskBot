from aiogram import Router, F

from aiogram.fsm.context import FSMContext
from aiogram.types import Message

from keyboards.reply.login_registration_kb import login_registration_kb
from keyboards.reply.back_kb import back_kb
from keyboards.reply.back_or_number_kb import back_or_number_kb

from states.registration import Registration

from utils.validations.valid_email import valid_email

from database.orm.user import email_exists


router = Router(name=__name__)


@router.message(Registration.email, F.text == "üö´ –ù–∞–∑–∞–¥ üö´")
async def registration_email_handler_back(message: Message, state: FSMContext):
    data = await state.get_data()

    if data["login_registration"] == "–í—Ö–æ–¥ üîë":
        await state.set_state(Registration.login_registration)
        await message.answer(
            text="–í–æ–π–¥–∏—Ç–µ –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –≤ –±–æ—Ç–µ.",
            reply_markup=login_registration_kb(),
            )
        
    elif data["login_registration"] == "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è üíØ":
        await state.set_state(Registration.password)
        await message.answer(
            text="–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å:\n"
                 "1. –°–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã\n"
                 "2. –ù–µ –º–µ–Ω–µ–µ 8 —Å–∏–º–≤–æ–ª–æ–≤\n"
                 "3. –ò–º–µ–µ—Ç —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∑–∞–≥–ª–∞–≤–Ω—É—é –±—É–∫–≤—É –∏ –æ–¥–Ω—É —Ü–∏—Ñ—Ä—É\n",
            reply_markup=back_kb(),
        )


@router.message(Registration.email, F.text.cast(valid_email).as_("email"))
async def registration_email_handler(message: Message, state: FSMContext):
    data = await state.get_data()

    if data["login_registration"] == "–í—Ö–æ–¥ üîë":
        if await email_exists(message.text):
            await state.set_state(Registration.password)
            await state.update_data(email=message.text)
            await message.answer(
                text="–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å. ",
                reply_markup=back_kb(),
                parse_mode=None,
            )
            
        else:
            await message.answer(
                text="–î–∞–Ω–Ω–∞—è –ø–æ—á—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n"
                     "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É\n"
                     "–∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –≤ –±–æ—Ç–µ!",
                reply_markup=back_kb(),
            )

    elif data["login_registration"] == "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è üíØ":
        if await email_exists(message.text):
            await message.answer(
                text="–î–∞–Ω–Ω–∞—è –ø–æ—á—Ç–∞ —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è!\n"
                     "–ú–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è\n"
                     "–∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥—É—é –ø–æ—á—Ç—É.",
                reply_markup=back_kb(),
            )

        else:
            await state.update_data(email=message.text)
            await state.set_state(Registration.phone_number)
            await message.answer(
                text="–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n"
                     "–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É <–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º> ‚¨áÔ∏è.",
                reply_markup=back_or_number_kb(),
                parse_mode=None,
            )


@router.message(Registration.email)
async def registration_email_handler_none(message: Message):
    await message.answer(
        text="–ü—Ä–æ—Å—Ç–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é.üòî\n"
             "–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –ø–æ—á—Ç—É!",
        reply_markup=back_kb(),
    )
